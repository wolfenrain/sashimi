// ignore_for_file: cascade_invocations

import 'package:flutter_test/flutter_test.dart';
import 'package:sashimi/sashimi.dart';

import '../helpers/helpers.dart';

class _TestObject extends SashimiObject {
  _TestObject() : super(position: Vector3.zero(), size: Vector3.zero());

  @override
  List<SashimiSlice<SashimiObject>> generateSlices() {
    return [_TestSlice(owner: this)];
  }
}

class _TestSlice extends SashimiSlice<_TestObject> {
  _TestSlice({
    required super.owner,
  });
}

void main() {
  group('SashimiObject', () {
    sashimiGame.testGameWidget(
      'sets rotation to object and controller',
      setUp: (game, tester) => game.ensureAdd(_TestObject()),
      verify: (game, tester) async {
        final object = game.descendants().whereType<_TestObject>().first;
        object.rotation = 10;

        expect(object.rotation, equals(10));
        expect(object.controller.rotation, equals(10));
      },
    );

    sashimiGame.testGameWidget(
      'retrieves slices generated by generateSlices',
      setUp: (game, tester) => game.ensureAdd(_TestObject()),
      verify: (game, tester) async {
        final object = game.descendants().whereType<_TestObject>().first;

        expect(object.slices.length, equals(1));
      },
    );

    sashimiGame.testGameWidget(
      'calls listener on onLoad',
      setUp: (game, tester) => game.ensureAdd(_TestObject()),
      verify: (game, tester) async {
        final object = game.descendants().whereType<_TestObject>().first;

        expect(object.isLoaded, equals(true));
      },
    );

    sashimiGame.testGameWidget(
      'calls listener on position change',
      setUp: (game, tester) => game.ensureAdd(_TestObject()),
      verify: (game, tester) async {
        final object = game.descendants().whereType<_TestObject>().first;

        var listenerCalled = false;
        object.position.addListener(() => listenerCalled = true);
        object.position.setValues(10, 10, 10);

        expect(listenerCalled, equals(true));
      },
    );

    sashimiGame.testGameWidget(
      'calls listener on size change',
      setUp: (game, tester) => game.ensureAdd(_TestObject()),
      verify: (game, tester) async {
        final object = game.descendants().whereType<_TestObject>().first;

        var listenerCalled = false;
        object.size.addListener(() => listenerCalled = true);
        object.size.setValues(10, 10, 10);

        expect(listenerCalled, equals(true));
      },
    );

    sashimiGame.testGameWidget(
      'calls listener on scale change',
      setUp: (game, tester) => game.ensureAdd(_TestObject()),
      verify: (game, tester) async {
        final object = game.descendants().whereType<_TestObject>().first;

        var listenerCalled = false;
        object.scale.addListener(() => listenerCalled = true);
        object.scale.setValues(10, 10, 10);

        expect(listenerCalled, equals(true));
      },
    );
  });
}
